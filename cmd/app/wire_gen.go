// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/liushuangls/go-server-template/configs"
	"github.com/liushuangls/go-server-template/internal/cmd"
	"github.com/liushuangls/go-server-template/internal/data"
	"github.com/liushuangls/go-server-template/internal/routes"
	"github.com/liushuangls/go-server-template/internal/routes/v1"
	"github.com/liushuangls/go-server-template/internal/service"
)

// Injectors from wire.go:

func app() (*cmd.App, func(), error) {
	config, err := configs.InitConfig()
	if err != nil {
		return nil, nil, err
	}
	sugaredLogger := cmd.NewLogger(config)
	engine := routes.NewEngine(config)
	client, err := data.NewRedisClient(config)
	if err != nil {
		return nil, nil, err
	}
	limiter := data.NewRedisLimiter(client)
	redislockClient := data.NewRedisLocker(client)
	jwt, err := cmd.NewJwt(config)
	if err != nil {
		return nil, nil, err
	}
	entClient, err := data.NewEntClient(config)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(entClient, sugaredLogger, client)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData)
	userService := service.NewUserService(sugaredLogger, jwt, userRepo)
	userRoute := v1.NewUserRoute(sugaredLogger, limiter, redislockClient, userService)
	httpEngine := routes.NewHttpEngine(engine, config, sugaredLogger, limiter, userRoute)
	options := cmd.Options{
		Log:  sugaredLogger,
		Http: httpEngine,
	}
	cmdApp := cmd.NewApp(options)
	return cmdApp, func() {
		cleanup()
	}, nil
}
